set nocompatible              " be iMproved, required
filetype off                  " required

" Start the plugins! ( stored them at the given path )
call plug#begin('~/.vim/plugged')

" Motions, Core
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-dispatch'
Plug 'tpope/vim-unimpaired'
Plug 'haya14busa/incsearch.vim'
Plug 'Chiel92/vim-autoformat'

" Unix tools
Plug 'tpope/vim-eunuch'

" .editorconfig file support
Plug 'editorconfig/editorconfig-vim'

" Git
Plug 'airblade/vim-gitgutter'
" Plug 'tpope/vim-fugitive'

" Color theme, from terminal
Plug 'chriskempson/base16-vim'

" TMUX <c-{hjkl}> movements
Plug 'christoomey/vim-tmux-navigator'

" Tag matching ( with % )
" Plug 'tmhedberg/matchit'

" Emmet 
Plug 'mattn/emmet-vim'

" Motions
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-indent'
Plug 'glts/vim-textobj-comment'
Plug 'bkad/CamelCaseMotion'

" Replace motion ( super useful )
Plug 'vim-scripts/ReplaceWithRegister'

" Completers
Plug 'SirVer/ultisnips'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --tern-completer' }
Plug 'scrooloose/syntastic'

" Family syntaxes
Plug 'Markdown-syntax'
Plug 'tpope/vim-jdaddy'
Plug 'elzr/vim-json'
Plug 'groenewege/vim-less'
Plug 'hail2u/vim-css3-syntax'

" Ansi colors, useful for when looking at console dumps with ansi-escape codes
" ( ie: colors )
" Plug 'powerman/vim-plugin-AnsiEsc'

" Ag, faster than ack, faster than grep
Plug 'gabesoft/vim-ags' " Faster ack, which is faster grep :)

" Ctags
Plug 'xolox/vim-misc'
Plug 'xolox/vim-easytags'

" Docs
Plug 'KabbAmine/zeavim.vim'

" Linters, javascript
Plug 'pangloss/vim-javascript' " Includes indenting
Plug 'mxw/vim-jsx'
Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
Plug 'okcompute/vim-javascript-motions'

" All langs ( ftdetect, syntax, etc )
" Plug 'sheerun/vim-polyglot'

" Nvim nodejs
" Plug 'neovim/node-host'

" Parenthesis inflector
" Plug 'snoe/nvim-parinfer.js'

" Org mode
" Plug 'tpope/vim-speeddating' " Required by org-mode
" Plug 'jceb/vim-orgmode'

" FZF, fuzzy searching
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

"""" Ledger cli
" Plug 'ledger/vim-ledger'

" All of your Plugins must be added before the following line
" End the plugins!
call plug#end()

"""" My own runtime ( For Ultisnips )
set rtp+=~/projects/dotfiles/.vim

"""" Leader key
let mapleader = "\<Space>"
let maplocalleader = ","

"""" camelCaseMotion maps
map <silent> ,w <Plug>CamelCaseMotion_w
map <silent> ,b <Plug>CamelCaseMotion_b
map <silent> ,e <Plug>CamelCaseMotion_e
map <silent> ,ge <Plug>CamelCaseMotion_ge

omap <silent> ,iw <Plug>CamelCaseMotion_iw
xmap <silent> ,iw <Plug>CamelCaseMotion_iw
omap <silent> ,ie <Plug>CamelCaseMotion_ie
xmap <silent> ,ie <Plug>CamelCaseMotion_ie
map <silent> ,ib <Plug>CamelCaseMotion_ib
xmap <silent> ,ib <Plug>CamelCaseMotion_ib

"""" Ledger cli
" augroup ledger-cli
"   inoremap <silent> <buffer> <Tab> <C-r>=ledger#autocomplete_and_align()<CR>
"   vnoremap <silent> <buffer> <Tab> :LedgerAlign<CR>
" augroup END


"""" FZF
nnoremap <leader>f :FzfFiles<cr>
nnoremap <Leader>j :AgFiles<CR>
nnoremap <Leader>l :FzfLines<CR>
nnoremap <Leader>a :FzfAg<CR>
nnoremap <Leader>b :FzfBuffer<CR>
nnoremap <Leader>t :FzfTags<CR>

let g:fzf_command_prefix = 'Fzf'
nnoremap <a-x> :FzfCommands<cr>
let g:fzf_layout = { 'window': 'enew' }
let g:fzf_layout = { 'window': '-tabnew' }

" imap <c-x><c-f> <plug>(fzf-complete-file-ag)
" imap <c-x><c-d> <plug>(fzf-complete-path)
imap <c-x><c-l> <plug>(fzf-complete-line)

function! s:echoline(line)
  execute append(line("."), a:line)
endfunction

command! -nargs=1 -complete=file Lines call PasteLineFromFile(<q-args>) 

function! PasteLineFromFile(line)
  call fzf#run({'source': 'cat '.a:line, 'sink': function('s:echoline'), 'options': '-m'})
endfunction

" Recent jump list with fasd
command! Fasd call fzf#run(
      \ {'source': 'fasd -l -d | uniq', 'sink': 'cd', 'options': ''})

command! AgFiles call fzf#run(fzf#wrap({
      \ 'source':  "ag -g '' -l --hidden ",
      \ 'options': '-m --prompt "Ag Files> "',
      \}))

" Set the current dir, based on fasd jump list
nnoremap <Leader>p :Fasd<CR>

" let g:fzf_colors =
"   \ { 'fg':    ['fg', 'Normal'],
"   \ 'bg':      ['bg', 'ColorColumn'],
"   \ 'hl':      ['fg', 'Comment'],
"   \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
"   \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
"   \ 'hl+':     ['fg', 'Statement'],
"   \ 'info':    ['fg', 'PreProc'],
"   \ 'prompt':  ['fg', 'Conditional'],
"   \ 'pointer': ['fg', 'Exception'],
"   \ 'marker':  ['fg', 'Keyword'],
"   \ 'spinner': ['fg', 'Label'],
"   \ 'header':  ['fg', 'Comment'] }

"""" Syntastic 
let g:syntastic_javascript_checkers = ["eslint"]
let g:syntastic_javascript_eslint_exec = "eslint_d"
let g:syntastic_mode_map = { "mode": "passive"}
let g:syntastic_error_symbol          = 'âœ˜'
let g:syntastic_mode_map = { "mode": "active"}

"""" JSX for all both .js and .jsx
let g:jsx_ext_required = 0

" Now we're using ctags-exuberant
" see: http://stackoverflow.com/questions/1790623/how-can-i-make-vims-taglist-plugin-show-useful-information-for-javascript
let g:tlist_javascript_settings = 'javascript;s:string;a:array;o:object;f:function'

"""" YCM You complete me
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

" Show errors, 'syntastic'
nnoremap <leader>er :Errors<CR>
" Show errors and move into window
nnoremap <leader>err :w<CR>:Errors<CR><C-W>j<CR>
nnoremap gen :lnext<cr>
nnoremap gep :lprev<cr>



"""" Ultisnips
" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<tab>"
let g:UltiSnipsJumpForwardTrigger = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" 'snips' is in my dotfiles runtimepath dir
let g:UltiSnipsSnippetsDir = "~/projects/dotfiles/.vim/snips"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snips"]
let g:UltiSnipsEditSplit= "context"


" Edits
nnoremap <leader>eu :UltiSnipsEdit<cr>
nnoremap <leader>eh :tabnew $HOME/.hyperterm.js<cr>
nnoremap <leader>ez :tabnew $HOME/.zsh<cr>

"""" Tern
let g:tern_show_argument_hints = "no"
" Remove the scratch/preview window that pops up when I use Tern/Omnicomplete
set completeopt-=preview


"""" General

" Set the current file's path as the current working dir, in vim
nnoremap <Leader><c-j> :cd %:p:h<CR>

" Make sure nothing conflicts with tmux ( c-a, is my tmux prefix )
map <c-a> <nop>

" Select inside function
nmap <leader>v <esc>/{<cr>%v%<s-v>
nmap <leader>x :cclose <bar> :lclose<cr>

" Shortcut to toggle `:SyntasticToggleMode`
nmap <Leader>sn :SyntasticToggleMode<CR>

" Shortcut to rapidly toggle `set list`
" nmap <Leader><tab>  :set list!<CR>

" Some useful tips...
" http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/

" For consistant behaviour with s-D and s-C
nnoremap Y y$

" Use the global clipboard, by default
set clipboard=unnamedplus

" Search
" Search with selection
vnoremap * y/<c-r>0<cr>
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Count search instances
nnoremap <leader>8 :%s///gn<cr>

"Map leader q to quit with saving
nnoremap <leader>q :q<CR>
"Map leader s to save file...
nnoremap <leader>w :w<CR>

"Map 'so' to parse the vim source file
nnoremap <leader>so :source %<CR>

"Map 's.' to run the current shell script
nnoremap <leader>s. :! . %<CR>

" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <leader>/ :nohl \| :redraw!<cr>

" Vundle PluginInstall
nmap <leader>pi :PlugInstall<CR>

" Edit this file, shortcut...

" Edit common files
" .bashrc
nnoremap <silent><leader>eb :tabnew ~/.bashrc<CR>
" .vrimrc
nnoremap <silent><leader>ev :tabnew ~/.vimrc<CR>

" Git status mapping
nnoremap <silent><leader>gs :Gstatus<CR>
nnoremap <silent><leader>gd :Gvdiff<CR>

" open with xdg-open
nnoremap <leader>o :!xdg-open %<CR>

" Dispatch: in ex mode
nnoremap <leader>dd :Dispatch<SPACE>

" Autocomplete with dictionary words when spell check is on
set complete+=kspell
" Set region to British English
set spelllang=en_gb
" set spellfile=$HOME/.vim-spell-en.utf-8.add


"""" Local .vimrc files
" Local .vimrc files...
set exrc            " enable per-directory .vimrc files
set secure          " disable unsafe commands in local .vimrc files

"""" Git Gutter
let g:gitgutter_map_keys = 0
noremap <leader>g :GitGutterLineHighlightsToggle <cr>
nmap gbk <Plug>GitGutterPrevHunk
nmap gbj <Plug>GitGutterNextHunk
nmap gbs <Plug>GitGutterStageHunk
nmap gbr <Plug>GitGutterUndoHunk

omap ig <Plug>GitGutterTextObjectInnerPending
omap ag <Plug>GitGutterTextObjectOuterPending
xmap ig <Plug>GitGutterTextObjectInnerVisual
xmap ag <Plug>GitGutterTextObjectOuterVisual


"""" Line numbers
" Relative/Absolute lines numbers...
set relativenumber
set number
augroup switchingbuffers
  autocmd InsertEnter * :set number
  autocmd InsertLeave * :set relativenumber
  autocmd FocusLost * :set number
  autocmd FocusGained * :set relativenumber
augroup END

"""" AutoCommands ( syntaxes )
" my filetype syntax definitions
augroup filetypedetect
  au BufRead,BufNewFile *.hbs,*.volt	set filetype=html
  au BufRead,BufNewFile *.json          set filetype=json
  au BufRead,BufNewFile *.ledger        set filetype=ledger
  au BufRead,BufNewFile *.snippets   set noexpandtab
  au BufRead,BufNewFile *.md   setlocal spell
  au BufRead,BufNewFile *.gitcommit   setlocal spell
  au BufRead,BufNewFile *.org   setlocal spell
  au BufRead,BufNewFile *.less set filetype=less
  au FileType less set omnifunc=csscomplete#CompleteCSS
augroup END

"""" Cursor line
" The row where your cursor is, is highlighted. It's warming to me
set cursorline
augroup enter_leave
  autocmd  BufLeave * set nocursorline
  autocmd  BufEnter * set cursorline
augroup END

"""" Colours, colors
syntax on
set background=dark
set novisualbell
" Terminal color mode, if in a non-true-color term
" set t_Co=256
let base16colorspace=256
colorscheme base16-default-dark

" Use the terminal's BG color
" highlight Normal ctermbg=NONE
" highlight nonText ctermbg=NONE

"""" List Chars
" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:â–¸\ ,eol:Â¬,nbsp:_,trail:#

"""" Saving
" For saving sane sessions...
set ssop-=options    " do not store global and local values in a session
set ssop-=folds      " do not store folds

"""" Autocomplete in ex readline...
set wildmode=longest,list,full

"""" Backspace, goes over everything
set backspace=indent,eol,start

"""" Backup files, who needs 'em?
set nobackup
set nowritebackup
set noswapfile

"""" Default Indents ( prefer to use .editorconfig, if you can )
set shiftwidth=2
set softtabstop=2 
set tabstop=2 
set expandtab
set nowrap
set smartindent
set cindent
set autoindent

"""" Search
set hlsearch
set incsearch
set ignorecase    " ignore case when searching
set smartcase     " ignore case if search pattern is all lowercase,
                  " case-sensitive otherwise

"""" Statusline, 0=never, 1=if-other-windows, 2=always
set laststatus=1

"""" Search
" highlight Search term=underline cterm=underline ctermfg=18 gui=underline guifg=#ab4642

"""" Greviences
" I want comments to only extend, when I hit C-RET, not on RET
" I want my theme to use the underlying colors ( without base16 )
