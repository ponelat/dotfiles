snippet i "import a from 'a'" b
import $1 from '$2'
endsnippet

# commonjs

snippet spyr "spyOn(require..." w
spyOn(require('$1'), '$2')
endsnippet

snippet tne "throw new Error" b
throw new Error('wat')
endsnippet

snippet req "Description" b
var $1 = require('$1')
endsnippet

snippet wat "console.log('wat?')" b
console.log('wat?')
endsnippet

snippet clll "console.log('lll', a)" b
console.log('lll $1', $1)
endsnippet

snippet retio "" b
if(!(this instanceof $1)) { return new $1($2) }
endsnippet

snippet clj "console.log(JSON.stringify)" b
console.log('$1', JSON.stringify($1, null, 2))
endsnippet

# React

snippet cwm "componentWillMount(){}" b
componentWillMount() {
		${0:${VISUAL}}
},
endsnippet

snippet cwum "componentWillUnMount(){}" b
componentWillUnMount() {
		${0:${VISUAL}}
},
endsnippet

snippet cdm "componentDidMount(){}" b
componentDidMount() {
		${0:${VISUAL}}
},
endsnippet

snippet gis "getInitialState(){}" b
getInitialState() {
		return {
				${0:${VISUAL}}
		}
},
endsnippet

snippet gip "getInitialProps(){}" b
getInitalProps() {
		return {
				${0:${VISUAL}}
		}
},
endsnippet

snippet pts "PropType.string.isRequired" b
$1: PropTypes.string.isRequired
endsnippet

snippet ptn "PropTypes.node.isRequired" b
$1: PropTypes.node.isRequired
endsnippet

snippet pto "PropTypes.object.isRequired" b
$1: PropTypes.object.isRequired
endsnippet

snippet pta "PropTypes.array.isRequired" b
$1: PropTypes.array.isRequired
endsnippet

snippet ptf "PropTypes.func.isRequired" b
$1: PropTypes.func.isRequired
endsnippet

snippet ptb "PropTypes.bool.isRequired" b
$1: PropTypes.bool.isRequired
endsnippet

snippet propt "PropTypes" b
$1.propTypes = {
	$0
}
endsnippet

snippet propta "PropTypes with examples" b
$1.propTypes = {
	one: PropTypes.string.isRequired,
	two: PropTypes.number.isRequired,
	three: PropTypes.object.isRequired,
	four: PropTypes.func.isRequired,
	five: PropTypes.bool.isRequired,
	six: PropTypes.bool.isRequired,
	seven: PropTypes.any.isRequired,
	eight: PropTypes.oneOf(["M", "F"]),
	nine: PropTypes.oneOfType([
		PropTypes.string,
	])
}

endsnippet

snippet cwrp "componentWillReceiveProps(){}" b
componentWillReceiveProps() {
		${0:${VISUAL}}
},
endsnippet

snippet render() "render(){ return <tag/> }" b
render() {
		return (
				${0:${VISUAL}}
		)
}
endsnippet

snippet rcons "React.Component contructro" b
constructor(props, context) {
	super(props, context)
	$0
}
endsnippet

snippet rcomp "React component (es2015 class)" b
export class $1 extends React.Component {

	render() {
		return (
			${0:${VISUAL}}
		)
	}

}

$1.propTypes = {

}
endsnippet

snippet rcompf "React component (es2015 class)" b
import React from "react"

export default class $1 extends React.Component {

	render() {
		return (
			${0:${VISUAL}}
		)
	}

}

endsnippet

# superagent
snippet rrn "fn(req,res,next)" w
function(req,res,next) {
		${0:${VISUAL}}
}
endsnippet

snippet efn "export function() {}" b
export function $1($2) {
	${0:${VISUAL}}
}
endsnippet

snippet fer "fn(err,res)" w
function(err,res) {
		${0:${VISUAL}}
}
endsnippet

# Tests
snippet ex "chai.expect" b
expect(${1:${0:${VISUAL}}}).to.$2
endsnippet

snippet efail "chai.expect true = false" b
expect(true).to.eql(false)
endsnippet

snippet exms "chai.expect.matchState" b
expect(${1:${0:${VISUAL}}}).to.matchState($2)
endsnippet

snippet exe "chai.expect.eql" b
expect(${1:${0:${VISUAL}}}).to.eql($2)
endsnippet

snippet exee "chai.expect.equal" b
expect(${1:${0:${VISUAL}}}).to.equal($2)
endsnippet

snippet exeee "chai.expect.deepEqual" b
expect(${1:${0:${VISUAL}}}).to.equal($2)
endsnippet

snippet ete "Expect.js - ex.toEqual" w
expect(${1:${0:${VISUAL}}}).toEqual($2)
endsnippet

snippet etf "Expect.js - ex.toEqual(false)" w
expect(${1:${0:${VISUAL}}}).toEqual(false)
endsnippet

snippet describe "descibe('',f())" b
describe('$1', function(){
		${0:${VISUAL}}
})
endsnippet

snippet it "it('', f())" b
it('$1', function(){
		${0:${VISUAL}}
})
endsnippet

snippet its "it.skip('', f())" b
it.skip('$1', function(){
		${0:${VISUAL}}
})
endsnippet

snippet before "before(fn)" b
before(function(){
		${0:${VISUAL}}
})
endsnippet

snippet beforee "beforeEach(fn)" b
beforeEach(function(){
		${0:${VISUAL}}
})
endsnippet

snippet after "after(fn)" b
after(function(){
		${0:${VISUAL}}
})
endsnippet

snippet aftere "afterEach(fn)" b
afterEach(function(){
		${0:${VISUAL}}
})
endsnippet

snippet fjo "fauxJax.on('', fn)" b
fauxJax.on('request', function(req) {
		${0:${VISUAL}}
})
endsnippet

# Console logs

snippet cl "console.log" b
console.log('${0:${VISUAL}}')
endsnippet

snippet cll "console.log('hi', hi)" b
console.log('${1:${VISUAL}}', $1)
endsnippet

snippet cle "console.error('hi', hi)" b
console.error('${1:${VISUAL}}', $1)
endsnippet

snippet clk "console.log(Object.keys)" b
console.log('keys for ' + '${1:${VISUAL}}', Object.keys($1))
endsnippet

snippet cla "console.log(args)" b
console.log('arguments', arguments)
endsnippet

snippet cl* "console.log(*******)" b
console.log('**********************************************')
endsnippet

# Angular shortcuts
snippet ngdir "Angular directive file"

/*global window */
(function(angular) {

		var DIRECTIVE = '${2:someDir}';
		angular
				.module('$1')
				.directive(DIRECTIVE,[ $2Directive ]);

		///////////////////////////

		function $2Directive() {
				return {
						link: $2DirectiveLink,
						restrict: 'A',
						scope: {
								'state': '='+DIRECTIVE
						}
				};

				//////////////

				function $2DirectiveLink ($scope, $el, $attrs) {

						$0

				}

		}

})(window.angular);

endsnippet

snippet f "function name(){}" w
function $1() {
		$2
}
endsnippet
